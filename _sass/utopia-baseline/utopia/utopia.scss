@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "sass:math";
@use "sass:string";
@use './helpers.scss';

// Singular clamp

@function calculateClamp($params) {
  $unit: 0.0625rem;
  @if (map.get($params, "usePx")) {
    $unit: 1px;
  }

  $relativeUnit: 1vw;
  @if (map.get($params, "relativeTo") == "container") {
    $relativeUnit: 1cqi;
  }
  @if (map.get($params, "relativeTo") == "viewport") {
    $relativeUnit: 1vi;
  }

  $isNegative: map.get($params, "minSize") > map.get($params, "maxSize");
  $min: map.get($params, "minSize");
  $max: map.get($params, "maxSize");

  @if ($isNegative) {
    $min: map.get($params, "maxSize");
    $max: map.get($params, "minSize")
  }

  $slope: math.div((map.get($params, "maxSize") - map.get($params, "minSize")), (map.get($params, "maxWidth") - map.get($params, "minWidth")));
  $intersection: (-1 * map.get($params, "minWidth")) * $slope + map.get($params, "minSize");
  @return "clamp(#{helpers.roundValue($min * $unit)}, #{helpers.roundValue($intersection * $unit)} + #{helpers.roundValue($slope * 100) * $relativeUnit}, #{helpers.roundValue($max * $unit)})";
}

// Type

@function calculateTypeSize($config, $viewport, $step) {
  $scale: helpers.range(map.get($config, 'minWidth'), map.get($config, 'maxWidth'), map.get($config, 'minTypeScale'), map.get($config, 'maxTypeScale'), $viewport);
  $fontSize: helpers.range(map.get($config, 'minWidth'), map.get($config, 'maxWidth'), map.get($config, 'minFontSize'), map.get($config, 'maxFontSize'), $viewport);
  @return $fontSize * math.pow($scale, $step);
}

@function calculateTypeStep($config, $step) {
  $minSize: calculateTypeSize($config, map.get($config, 'minWidth'), $step);
  $maxSize: calculateTypeSize($config, map.get($config, 'maxWidth'), $step);

  @return (
    "step": $step,
    "minSize": $minSize,
    "maxSize": $maxSize,
    "clamp": calculateClamp((
      "minWidth": map.get($config, "minWidth"),
      "maxWidth": map.get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "relativeTo": map.get($config, "relativeTo")
    ))
  );
}

@function calculateTypeScale($config) {
  $steps: helpers.newList(calculateTypeStep($config, 0));

  $positiveSteps: helpers.getDefault($config, "positiveSteps", 0);
  @if ($positiveSteps != 0) {
    @for $i from 1 through $positiveSteps {
      $steps: list.append($steps, calculateTypeStep($config, $i));
    }
  }

  $negativeSteps: helpers.getDefault($config, "negativeSteps", 0);
  @if ($negativeSteps != 0) {
    @for $i from 1 through $negativeSteps {
      $steps: helpers.prepend($steps, calculateTypeStep($config, -1 * $i));
    }
  }

  @return $steps;
}

// Space

@function calculateSpaceSize($config, $multiplier, $step) {
  $minSize: math.round(map.get($config, "minSize") * $multiplier);
  $maxSize: math.round(map.get($config, "maxSize") * $multiplier);

  $label: 's';
  @if ($step == 1) {
    $label: 'm';
  } @else if ($step == 2) {
    $label: 'l';
  } @else if ($step == 3) {
    $label: 'xl';
  } @else if ($step > 3) {
    $label: "#{$step - 2}xl";
  } @else if ($step == -1) {
    $label: 'xs';
  } @else if ($step < -1) {
    $label: "#{math.abs($step)}xs";
  }

  @return (
    "label": $label,
    "minSize": helpers.roundValue($minSize),
    "maxSize": helpers.roundValue($maxSize),
    "clamp": calculateClamp((
      "minWidth": map.get($config, "minWidth"),
      "maxWidth": map.get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "relativeTo": map.get($config, "relativeTo")
    )),
    "clampPx": calculateClamp((
      "minWidth": map.get($config, "minWidth"),
      "maxWidth": map.get($config, "maxWidth"),
      "minSize": $minSize,
      "maxSize": $maxSize,
      "usePx": true,
      "relativeTo": map.get($config, "relativeTo")
    ))
  );
}

@function calculateSpacePair($config, $a, $b) {
  @return (
    "label": "#{map.get($a, "label")}-#{map.get($b, "label")}",
    "minSize": map.get($a, "minSize"),
    "maxSize": map.get($b, "maxSize"),
    "clamp": calculateClamp((
      "minWidth": map.get($config, "minWidth"),
      "maxWidth": map.get($config, "maxWidth"),
      "minSize": map.get($a, "minSize"),
      "maxSize": map.get($b, "maxSize"),
      "relativeTo": map.get($config, "relativeTo")
    )),
    "clampPx": calculateClamp((
      "minWidth": map.get($config, "minWidth"),
      "maxWidth": map.get($config, "maxWidth"),
      "minSize": map.get($a, "minSize"),
      "maxSize": map.get($b, "maxSize"),
      "usePx": true,
      "relativeTo": map.get($config, "relativeTo")
    ))
  );
}

@function calculateOneUpPairs($config, $sizes) {
  $pairs: ();
  @each $size in $sizes {
    $i: list.index($sizes, $size);
    @if ($i > 1) {
      $prev: list.nth($sizes, $i - 1);
      $pairs: list.append($pairs, calculateSpacePair($config, $prev, $size));
    }
  }

  @return $pairs;
}

@function calculateAllPairs($config, $sizes) {
  $pairs: ();
  @each $size in $sizes {
    $i: list.index($sizes, $size);
    @each $subSize in $sizes {
      $j: list.index($sizes, $subSize);
      @if ($i != $j) {
        $pairs: list.append($pairs, calculateSpacePair($config, $size, $subSize));
      }
    }
  }

  @return $pairs;
}

@function calculateCustomPairs($config, $sizes) {
  $pairs: ();
  $customSizes: map.get($config, "customSizes");
  @if (meta.type-of($customSizes) != "list") {
    @return $pairs;
  }

  @each $label in $customSizes {
    $keys: string.split($label, '-', 1);
    $a: helpers.findByKey($sizes, "label", list.nth($keys, 1));
    $b: helpers.findByKey($sizes, "label", list.nth($keys, 2));
    @if (meta.type-of($a) == "map" and meta.type-of($b) == "map") {
      $pairs: list.append($pairs, calculateSpacePair($config, $a, $b));
    }
  }
  
  @return $pairs;
}

@function calculateSpaceScale($config) {
  $sizes: helpers.newList(calculateSpaceSize($config, 1, 0));

  $positiveSteps: map.get($config, "positiveSteps");
  @if (meta.type-of($positiveSteps) == "list") {
    @each $step in $positiveSteps {
      $i: list.index($positiveSteps, $step);
      $sizes: list.append($sizes, calculateSpaceSize($config, $step, $i));
    }
  }

  $negativeSteps: map.get($config, "negativeSteps");
  @if (meta.type-of($negativeSteps) == "list") {
    @each $step in $negativeSteps {
      $i: list.index($negativeSteps, $step);
      $sizes: helpers.prepend($sizes, calculateSpaceSize($config, $step, -1 * $i));
    }
  }

  @return (
    "sizes": $sizes,
    "oneUpPairs": calculateOneUpPairs($config, $sizes),
    "customPairs": calculateCustomPairs($config, $sizes),
    "allPairs": calculateAllPairs($config, $sizes),
  );
}

// Clamps

@function calculateClamps($config) {
  $pairs: ();

  @each $item in map.get($config, "pairs") {
    $min: list.nth($item, 1);
    $max: list.nth($item, 2);
    $pairs: list.append($pairs, (
      "label": "#{$min}-#{$max}",
      "clamp": calculateClamp((
        "minWidth": map.get($config, "minWidth"),
        "maxWidth": map.get($config, "maxWidth"),
        "minSize": $min,
        "maxSize": $max,
        "usePx": map.get($config, "usePx"),
        "relativeTo": map.get($config, "relativeTo")
      ))
    ));
  }

  @return $pairs;
}

// Mixins

@mixin generateTypeScale($config) {
  $prefix: helpers.getDefault($config, "prefix", "step-");
  @each $step in calculateTypeScale($config) {
    --#{$prefix}#{map.get($step, "step")}: #{map.get($step, "clamp")};
  }
}

@mixin generateSpaceScale($config) {
  $prefix: helpers.getDefault($config, "prefix", "space-");
  $format: "clamp";
  @if (map.get($config, "usePx")) {
    $format: "clampPx";
  }

  $scale: calculateSpaceScale($config);
  @each $size in map.get($scale, "sizes") {
    --#{$prefix}#{map.get($size, "label")}: #{map.get($size, $format)};
  }

  @if (map.get($config, "allPairs")) {
    @each $size in map.get($scale, "allPairs") {
      --#{$prefix}#{map.get($size, "label")}: #{map.get($size, $format)};
    }
  } @else {
    @each $size in map.get($scale, "oneUpPairs") {
      --#{$prefix}#{map.get($size, "label")}: #{map.get($size, $format)};
    }
  
    @each $size in map.get($scale, "customPairs") {
      --#{$prefix}#{map.get($size, "label")}: #{map.get($size, $format)};
    }
  }
}

@mixin generateClamp($config) {
  $prefix: helpers.getDefault($config, "prefix", "space-");
  $min: map.get($config, "minSize");
  $max: map.get($config, "maxSize");
  --#{$prefix}#{$min}-#{$max}: #{calculateClamp($config)};
}

@mixin generateClamps($config) {
  $prefix: helpers.getDefault($config, "prefix", "space-");
  $clamps: calculateClamps($config);
  @each $size in $clamps {
    --#{$prefix}#{map.get($size, "label")}: #{map.get($size, "clamp")};
  }
}
